---
description:
globs:
alwaysApply: false
---
# Rust Project Structure and Module Guidelines

Best practices for organizing Rust projects and modules.

<rule>
name: rust_project_structure
description: Guidelines for structuring Rust projects and organizing modules
filters:
  - type: file_extension
    pattern: "\\.rs$"
  - type: content
    pattern: "(?i)(mod|pub|use|crate|extern)"

actions:
  - type: suggest
    message: |
      Project Structure and Module Organization:

      1. Directory Structure:
         ```
         project/
         ├── Cargo.toml
         ├── src/
         │   ├── main.rs        # Binary crate root
         │   ├── lib.rs         # Library crate root
         │   ├── bin/           # Additional binaries
         │   ├── modules/       # Internal modules
         │   └── tests/         # Integration tests
         ```

      2. Module Organization:
         ```rust
         // ✅ Good: Clear module structure
         // lib.rs
         pub mod core;
         pub mod utils;
         pub mod api;

         // core/mod.rs
         mod database;
         mod models;
         pub use database::Connection;
         pub use models::User;
         ```

      3. Visibility Guidelines:
         - Keep implementation details private
         - Export only what's necessary
         - Use re-exports for clean APIs
         - Consider using pub(crate)

      4. Dependencies:
         - Organize workspace members logically
         - Use feature flags for optional functionality
         - Minimize dependency tree depth
         - Version dependencies appropriately

      5. Common Patterns:
         ```rust
         // ✅ Good: Prelude pattern
         pub mod prelude {
             pub use crate::core::{User, Connection};
             pub use crate::utils::helpers::*;
         }

         // ✅ Good: Builder module pattern
         pub mod builder {
             mod implementation;
             pub use implementation::Builder;
         }
         ```

      6. Code Formatting with `rustfmt`:
         Ensure consistent code style across your project by using `rustfmt`.
         Install it with `rustup component add rustfmt`.
         Run `cargo fmt` to format your entire project.
         Consider integrating it into your CI pipeline and pre-commit hooks.

      7. Linting with `Clippy`:
         Use `clippy`, Rust's official linter, to catch common mistakes and improve your code.
         Install it with `rustup component add clippy`.
         Run `cargo clippy` (or `cargo clippy -- -D warnings` to treat all warnings as errors).
         Clippy provides a wide range of lints that can significantly enhance code quality, performance, and idiomatic Rust usage.

      8. SpacetimeDB Project Structure (Rust):
         When working with SpacetimeDB, the server module is initialized using the `spacetime` CLI:
         ```bash
         spacetime init --lang rust my_spacetimedb_module
         ```
         This creates a directory (e.g., `my_spacetimedb_module/`) containing:
         ```
         my_spacetimedb_module/
         ├── Cargo.toml     # Configured for cdylib, SpacetimeDB SDK dependency
         └── src/
             └── lib.rs     # Main file for defining tables, types, and reducers
         ```
         - Your primary application logic (schema definitions, reducers) will reside in `lib.rs` and any modules it includes.
         - The `Cargo.toml` will be pre-configured by `spacetime init` with the necessary `crate-type = ["cdylib"]` and SpacetimeDB SDK dependencies (e.g., `spacetimedb-sdk`).
         - Client code is typically in a separate project/crate and uses bindings generated by `spacetime generate`.

examples:
  - input: |
      // main.rs
      mod utils;
      mod helpers;
      mod common;
    output: "Consider organizing related modules into a common parent module for better structure"

metadata:
  priority: high
  version: 1.0
</rule>
