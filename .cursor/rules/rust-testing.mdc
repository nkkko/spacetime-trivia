---
description:
globs:
alwaysApply: false
---
# Rust Testing and Documentation Guidelines

Best practices for testing and documenting Rust code.

<rule>
name: rust_testing
description: Guidelines for comprehensive testing and documentation in Rust
filters:
  - type: file_extension
    pattern: "\\.rs$"
  - type: content
    pattern: "(?i)(#\\[test\\]|assert|doc|///?|#\\[cfg\\(test\\)\\])"

actions:
  - type: suggest
    message: |
      Testing and Documentation Best Practices:

      1. Unit Testing:
         ```rust
         // ✅ Good: Comprehensive unit test
         #[cfg(test)]
         mod tests {
             use super::*;

             #[test]
             fn test_process_valid_input() {
                 let input = "valid data";
                 let result = process_input(input);
                 assert!(result.is_ok());
                 assert_eq!(result.unwrap(), "processed: valid data");
             }

             #[test]
             fn test_process_invalid_input() {
                 let input = "";
                 assert!(matches!(
                     process_input(input),
                     Err(Error::InvalidInput)
                 ));
             }
         }
         ```

      2. Testing Panics:
         ```rust
         // ✅ Good: Testing for expected panics
         #[cfg(test)]
         mod panic_tests {
             fn only_accepts_positive(value: i32) {
                 if value <= 0 {
                     panic!("Value must be positive!");
                 }
             }

             #[test]
             #[should_panic(expected = "Value must be positive!")]
             fn test_negative_input_panics() {
                 only_accepts_positive(-1);
             }
         }
         ```

      3. Documentation:
         ```rust
         /// Processes the input string and returns a formatted result
         ///
         /// # Arguments
         ///
         /// * `input` - The input string to process
         ///
         /// # Returns
         ///
         /// * `Ok(String)` - The processed string
         /// * `Err(Error)` - If the input is invalid
         ///
         /// # Examples
         ///
         /// ```
         /// let result = process_input("test");
         /// assert!(result.is_ok());
         /// ```
         pub fn process_input(input: &str) -> Result<String, Error> {
             // Implementation
         }
         ```

      4. Integration Testing:
         - Place integration tests in tests/ directory
         - Test public API surface
         - Use test fixtures and helpers
         - Consider property-based testing

      5. Documentation Tests:
         - Include runnable examples
         - Document error cases
         - Show common use cases
         - Keep examples simple and clear

      6. Testing Patterns:
         ```rust
         // ✅ Good: Test helper functions
         #[cfg(test)]
         mod tests {
             use super::*;

             fn setup() -> TestContext {
                 // Setup test environment
             }

             fn teardown(ctx: TestContext) {
                 // Cleanup
             }

             #[test]
             fn test_with_context() {
                 let ctx = setup();
                 // Test logic
                 teardown(ctx);
             }
         }
         ```

      7. Testing SpacetimeDB Modules (Rust):
         Testing SpacetimeDB modules involves a combination of unit and integration tests.

         a. Unit Testing Reducers:
            - Reducers are Rust functions and can be unit-tested like any other Rust code.
            - You may need to mock `ReducerContext` and simulate database state for focused tests.
            - Example:
              ```rust
              #[cfg(test)]
              mod tests {
                  use super::*; // Assuming your reducer and types are in the parent module
                  use spacetimedb_sdk::ReducerContext;
                  // Mock or simulate parts of ReducerContext or db as needed

                  // A simplified mock context for demonstration
                  fn mock_reducer_context(sender: Identity) -> ReducerContext {
                      // This is a conceptual mock. Actual mocking might be more involved
                      // or you might construct a testable version of your state.
                      ReducerContext::new(sender, spacetimedb_sdk::Timestamp::now(), "mock_transaction_id")
                  }

                  #[test]
                  fn test_my_reducer_logic() {
                      // Setup: Initialize mock state or tables if your reducer reads from them
                      // MyTable::insert(MyTableRow { id: 1, data: "initial".to_string() }).unwrap();

                      let mock_identity = Identity::from_bytes(&[0u8; 32]).unwrap(); // Example identity
                      let ctx = mock_reducer_context(mock_identity);
                      let arg1 = "some_value".to_string();

                      // Call the reducer function directly
                      my_reducer_function(ctx, arg1);

                      // Assertions: Verify changes to state or expected outcomes
                      // e.g., check if a new row was inserted or an existing one updated.
                      // let updated_row = MyTable::filter_by_id(&1);
                      // assert!(updated_row.is_some());
                      // assert_eq!(updated_row.unwrap().data, "updated_data");
                  }
              }
              ```

         b. Integration Testing:
            - For end-to-end testing, you'll typically interact with a running SpacetimeDB instance.
            - Workflow:
                1. Start a local SpacetimeDB server: `spacetime start` (or use Docker).
                2. Build your module: `spacetime build --project-path ./my_module`.
                3. Publish your module to the local server: `spacetime publish --project-path ./my_module test_db`.
                4. Write test clients (e.g., in Rust using generated bindings via `spacetime generate`) that:
                   - Connect to `test_db`.
                   - Call reducers.
                   - Subscribe to data and assert expected states or updates.
                5. Clean up the test database if necessary: `spacetime delete test_db`.
            - This approach tests the full flow, including serialization, network communication, and database interactions.
            - Consider scripting these steps for automated integration tests.

examples:
  - input: |
      pub fn process(data: &str) -> Result<String, Error> {
          // Implementation without tests or docs
      }
    output: "Add comprehensive documentation and tests for the public function"

metadata:
  priority: high
  version: 1.0
</rule>
